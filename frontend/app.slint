import { MaterialWindow, MaterialWindowAdapter, NavigationDrawer, Dialog, MaterialText, SegmentedButton } from "../material-components/material.slint";
import { MainWindowAdapter } from "./main_window_adapter.slint";
import { FilledIcons, OutlinedIcons } from "./icons.slint";
import { Sidebar } from "./components/sidebar.slint";
import { SpaceView } from "views/space_view.slint";
import { DownloadView, VideoInfo } from "views/download_view.slint";
import { SettingsView } from "views/settings_view.slint";
import { Button } from "std-widgets.slint";
import { TextField } from "../material-components/ui/components/text_field.slint";
import { QueryCardInfo } from "./modules.slint";
import { ListItem } from "./components/task_list.slint";

export component MainWindow inherits MaterialWindow {
    title: "TypeMusic";
    preferred-width: 800px;
    preferred-height: 600px;
    background: MainWindowAdapter.background;
    default-font-family: "Roboto";


    in property <int> download_view_index; // index for download view
    callback on_goto_create_task(); // add task button
    callback download_back_clicked(); // leading back button for download view
    // Download page -> Query view
    in property <bool> query_is_info_showing; // query response card
    in property <bool> query_is_querying;
    in property <QueryCardInfo> query_card;
    callback query_bili_info(int, string);

    // Download page -> Editor view
    in property <int> crate_task_view_index;
    in property <bool> is_include_parts: true;
    in property <bool> is_creating;
    in property <[ListItem]> task_item_list: [];
    callback add_to_temp_list();
    callback add_to_create();

    callback switch_watcher(bool) -> bool;
    private property <bool> settings-enable-watcher;


    property <int> tab-index: 0;

    HorizontalLayout {
        Sidebar {
            current_item <=> tab-index;
        }
        
        // Switch Tabs
        if tab-index == 0 : DownloadView {
            viewIndex: download_view_index;
            on_goto_create_task => {on_goto_create_task()}
            back_clicked => {download_back_clicked()}
            crate_task_view_index: crate_task_view_index;

            query_is_info_showing: query_is_info_showing;
            query_is_querying: query_is_querying;
            query_card: query_card;
            query_info(queryType, input) => {query_bili_info(queryType, input)}

            is_include_parts: is_include_parts;
            is_creating: is_creating;
            task_item_list: task_item_list;
            add_to_temp_list => {add_to_temp_list()}
            add_to_create => {add_to_create()}
        }
        if tab-index == 1: SpaceView{}
        if tab-index == 2: SettingsView {
            enable-watcher <=> settings-enable-watcher;
            settingsChanged => {
                switch_watcher(settings-enable-watcher);
            }
        }
    }

    
    // dialog := Dialog {
    //     width: 800px;
    //     height: 600px;
    //     title: "Add Task";
    //     default_action_text: "Submit";
    //     actions: ["Cancel"];
    //     // close-policy: no-auto-close;

    //     VerticalLayout {

    //         MaterialText {text: "select a type of your query";}
    //         SegmentedButton {
    //             items: [
    //                 {text: "BVID",},
    //                 {text: "AVID",}
    //             ];
    //         }
    //         TextField {
    //             // text <=> userInput;
    //             label: "BVID";
    //             vertical-stretch: 0;
    //         }
    //     }
    //     default_action_clicked => {
    //         dialog.close();
    //     }
    //     action_clicked(index) => {
    //         self.close();
    //     }
    // }
}